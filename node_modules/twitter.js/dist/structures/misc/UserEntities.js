"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _UserDescriptionEntity_instances, _UserDescriptionEntity_patchCashtags, _UserDescriptionEntity_patchHashtags, _UserDescriptionEntity_patchMentions, _UserDescriptionEntity_patchUrls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserURLEntity = exports.UserMentionEntity = exports.UserHashtagEntity = exports.UserCashtagEntity = exports.UserBaseEntity = exports.UserDescriptionEntity = exports.UserEntities = void 0;
class UserEntities {
    constructor(data) {
        this.url = data.url?.urls[0] ? new UserURLEntity(data.url.urls[0]) : null;
        this.description = data.description ? new UserDescriptionEntity(data.description) : null;
    }
}
exports.UserEntities = UserEntities;
class UserDescriptionEntity {
    constructor(data) {
        _UserDescriptionEntity_instances.add(this);
        this.urls = __classPrivateFieldGet(this, _UserDescriptionEntity_instances, "m", _UserDescriptionEntity_patchUrls).call(this, data.urls);
        this.hashtags = __classPrivateFieldGet(this, _UserDescriptionEntity_instances, "m", _UserDescriptionEntity_patchHashtags).call(this, data.hashtags);
        this.mentions = __classPrivateFieldGet(this, _UserDescriptionEntity_instances, "m", _UserDescriptionEntity_patchMentions).call(this, data.mentions);
        this.cashtags = __classPrivateFieldGet(this, _UserDescriptionEntity_instances, "m", _UserDescriptionEntity_patchCashtags).call(this, data.cashtags);
    }
}
exports.UserDescriptionEntity = UserDescriptionEntity;
_UserDescriptionEntity_instances = new WeakSet(), _UserDescriptionEntity_patchCashtags = function _UserDescriptionEntity_patchCashtags(rawUserCashtags) {
    const userCashtagsArray = [];
    if (!rawUserCashtags)
        return userCashtagsArray;
    for (const rawUserCashtag of rawUserCashtags) {
        const userCashtag = new UserCashtagEntity(rawUserCashtag);
        userCashtagsArray.push(userCashtag);
    }
    return userCashtagsArray;
}, _UserDescriptionEntity_patchHashtags = function _UserDescriptionEntity_patchHashtags(rawUserHashtags) {
    const userHashtagsArray = [];
    if (!rawUserHashtags)
        return userHashtagsArray;
    for (const rawUserHashtag of rawUserHashtags) {
        const userHashtag = new UserHashtagEntity(rawUserHashtag);
        userHashtagsArray.push(userHashtag);
    }
    return userHashtagsArray;
}, _UserDescriptionEntity_patchMentions = function _UserDescriptionEntity_patchMentions(rawUserMentions) {
    const userMentionsArray = [];
    if (!rawUserMentions)
        return userMentionsArray;
    for (const rawUserMention of rawUserMentions) {
        const userMention = new UserMentionEntity(rawUserMention);
        userMentionsArray.push(userMention);
    }
    return userMentionsArray;
}, _UserDescriptionEntity_patchUrls = function _UserDescriptionEntity_patchUrls(rawUserUrls) {
    const userUrlsArray = [];
    if (!rawUserUrls)
        return userUrlsArray;
    for (const rawUserUrl of rawUserUrls) {
        const userUrl = new UserURLEntity(rawUserUrl);
        userUrlsArray.push(userUrl);
    }
    return userUrlsArray;
};
class UserBaseEntity {
    constructor(data) {
        this.start = data.start;
        this.end = data.end;
    }
}
exports.UserBaseEntity = UserBaseEntity;
class UserCashtagEntity extends UserBaseEntity {
    constructor(data) {
        super(data);
        this.tag = data.tag;
    }
}
exports.UserCashtagEntity = UserCashtagEntity;
class UserHashtagEntity extends UserBaseEntity {
    constructor(data) {
        super(data);
        this.tag = data.tag;
    }
}
exports.UserHashtagEntity = UserHashtagEntity;
class UserMentionEntity extends UserBaseEntity {
    constructor(data) {
        super(data);
        this.username = data.username;
    }
}
exports.UserMentionEntity = UserMentionEntity;
class UserURLEntity extends UserBaseEntity {
    constructor(data) {
        super(data);
        this.url = data.url;
        this.expandedURL = data.expanded_url;
        this.displayURL = data.display_url;
    }
}
exports.UserURLEntity = UserURLEntity;
//# sourceMappingURL=UserEntities.js.map