"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RetweetedByUsersBook_instances, _RetweetedByUsersBook_fetchPages;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetweetedByUsersBook = void 0;
const util_1 = require("../util");
const BaseBook_1 = require("./BaseBook");
const errors_1 = require("../errors");
const structures_1 = require("../structures");
class RetweetedByUsersBook extends BaseBook_1.BaseBook {
    constructor(client, options) {
        super(client, options);
        _RetweetedByUsersBook_instances.add(this);
        const tweetId = client.tweets.resolveId(options.tweet);
        if (!tweetId)
            throw new errors_1.CustomError('TWEET_RESOLVE_ID');
        this.tweetId = tweetId;
    }
    async fetchNextPage() {
        if (!this._hasMadeInitialRequest) {
            this._hasMadeInitialRequest = true;
            return __classPrivateFieldGet(this, _RetweetedByUsersBook_instances, "m", _RetweetedByUsersBook_fetchPages).call(this);
        }
        if (!this._nextToken)
            throw new errors_1.CustomError('PAGINATED_RESPONSE_TAIL_REACHED');
        return __classPrivateFieldGet(this, _RetweetedByUsersBook_instances, "m", _RetweetedByUsersBook_fetchPages).call(this, this._nextToken);
    }
    async fetchPreviousPage() {
        if (!this._previousToken)
            throw new errors_1.CustomError('PAGINATED_RESPONSE_HEAD_REACHED');
        return __classPrivateFieldGet(this, _RetweetedByUsersBook_instances, "m", _RetweetedByUsersBook_fetchPages).call(this, this._previousToken);
    }
}
exports.RetweetedByUsersBook = RetweetedByUsersBook;
_RetweetedByUsersBook_instances = new WeakSet(), _RetweetedByUsersBook_fetchPages = async function _RetweetedByUsersBook_fetchPages(token) {
    const retweetingUsers = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.userExpansions,
        'tweet.fields': queryParameters?.tweetFields,
        'user.fields': queryParameters?.userFields,
        pagination_token: token,
        max_results: this.maxResultsPerPage ?? undefined,
    };
    const requestData = new structures_1.RequestData({ query });
    const data = await this.client._api
        .tweets(this.tweetId)
        .retweeted_by.get(requestData);
    this._nextToken = data.meta.next_token;
    this._previousToken = data.meta.previous_token;
    this.hasMore = data.meta.next_token ? true : false;
    if (data.meta.result_count === 0)
        return retweetingUsers;
    const rawUsers = data.data;
    const rawIncludes = data.includes;
    for (const rawUser of rawUsers) {
        const user = this.client.users._add(rawUser.id, { data: rawUser, includes: rawIncludes }, false);
        retweetingUsers.set(user.id, user);
    }
    return retweetingUsers;
};
//# sourceMappingURL=RetweetedByUsersBook.js.map