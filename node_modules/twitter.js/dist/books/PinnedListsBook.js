"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PinnedListsBook_instances, _PinnedListsBook_fetchPages;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinnedListsBook = void 0;
const util_1 = require("../util");
const BaseBook_1 = require("./BaseBook");
const errors_1 = require("../errors");
const structures_1 = require("../structures");
class PinnedListsBook extends BaseBook_1.BaseBook {
    constructor(client, options) {
        super(client, options);
        _PinnedListsBook_instances.add(this);
        const userId = client.users.resolveId(options.user);
        if (!userId)
            throw new errors_1.CustomError('USER_RESOLVE_ID', 'create PinnedListsBook for');
        this.userId = userId;
    }
    async fetchNextPage() {
        if (!this._hasMadeInitialRequest) {
            this._hasMadeInitialRequest = true;
            return __classPrivateFieldGet(this, _PinnedListsBook_instances, "m", _PinnedListsBook_fetchPages).call(this);
        }
        if (!this._nextToken)
            throw new errors_1.CustomError('PAGINATED_RESPONSE_TAIL_REACHED');
        return __classPrivateFieldGet(this, _PinnedListsBook_instances, "m", _PinnedListsBook_fetchPages).call(this, this._nextToken);
    }
    async fetchPreviousPage() {
        if (!this._previousToken)
            throw new errors_1.CustomError('PAGINATED_RESPONSE_HEAD_REACHED');
        return __classPrivateFieldGet(this, _PinnedListsBook_instances, "m", _PinnedListsBook_fetchPages).call(this, this._previousToken);
    }
}
exports.PinnedListsBook = PinnedListsBook;
_PinnedListsBook_instances = new WeakSet(), _PinnedListsBook_fetchPages = async function _PinnedListsBook_fetchPages(token) {
    const pinnedLists = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.listExpansions,
        'user.fields': queryParameters?.userFields,
        'list.fields': queryParameters?.listFields,
        pagination_token: token,
    };
    if (this.maxResultsPerPage)
        query.max_results = this.maxResultsPerPage;
    const requestData = new structures_1.RequestData({ query });
    const data = await this.client._api
        .users(this.userId)
        .followed_lists.get(requestData);
    this._nextToken = data.meta.next_token;
    this._previousToken = data.meta.previous_token;
    this.hasMore = data.meta.next_token ? true : false;
    if (data.meta.result_count === 0)
        return pinnedLists;
    const rawLists = data.data;
    const rawIncludes = data.includes;
    for (const rawList of rawLists) {
        const list = this.client.lists._add(rawList.id, { data: rawList, includes: rawIncludes }, false);
        pinnedLists.set(list.id, list);
    }
    return pinnedLists;
};
//# sourceMappingURL=PinnedListsBook.js.map