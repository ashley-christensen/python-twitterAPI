"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ComposedTweetsBook_instances, _ComposedTweetsBook_fetchPages;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComposedTweetsBook = void 0;
const util_1 = require("../util");
const errors_1 = require("../errors");
const structures_1 = require("../structures");
const BaseRangeBook_1 = require("./BaseRangeBook");
class ComposedTweetsBook extends BaseRangeBook_1.BaseRangeBook {
    constructor(client, options) {
        super(client, options);
        _ComposedTweetsBook_instances.add(this);
        const userId = client.users.resolveId(options.user);
        if (!userId)
            throw new errors_1.CustomError('USER_RESOLVE_ID', 'create ComposedTweetsBook for');
        this.userId = userId;
        this.exclude = options.exclude ?? null;
    }
    async fetchNextPage() {
        if (!this._hasMadeInitialRequest) {
            this._hasMadeInitialRequest = true;
            return __classPrivateFieldGet(this, _ComposedTweetsBook_instances, "m", _ComposedTweetsBook_fetchPages).call(this);
        }
        if (!this._nextToken)
            throw new errors_1.CustomError('PAGINATED_RESPONSE_TAIL_REACHED');
        return __classPrivateFieldGet(this, _ComposedTweetsBook_instances, "m", _ComposedTweetsBook_fetchPages).call(this, this._nextToken);
    }
    async fetchPreviousPage() {
        if (!this._previousToken)
            throw new errors_1.CustomError('PAGINATED_RESPONSE_HEAD_REACHED');
        return __classPrivateFieldGet(this, _ComposedTweetsBook_instances, "m", _ComposedTweetsBook_fetchPages).call(this, this._previousToken);
    }
}
exports.ComposedTweetsBook = ComposedTweetsBook;
_ComposedTweetsBook_instances = new WeakSet(), _ComposedTweetsBook_fetchPages = async function _ComposedTweetsBook_fetchPages(token) {
    const composedTweets = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.tweetExpansions,
        'media.fields': queryParameters?.mediaFields,
        'place.fields': queryParameters?.placeFields,
        'poll.fields': queryParameters?.pollFields,
        'tweet.fields': queryParameters?.tweetFields,
        'user.fields': queryParameters?.userFields,
        pagination_token: token,
    };
    if (this.exclude)
        query.exclude = this.exclude;
    if (this.afterTweetId)
        query.since_id = this.afterTweetId;
    if (this.beforeTweetId)
        query.until_id = this.beforeTweetId;
    if (this.maxResultsPerPage)
        query.max_results = this.maxResultsPerPage;
    if (this.startTimestamp)
        query.start_time = new Date(this.startTimestamp).toISOString();
    if (this.endTimestamp)
        query.end_time = new Date(this.endTimestamp).toISOString();
    const requestData = new structures_1.RequestData({ query });
    const data = await this.client._api.users(this.userId).tweets.get(requestData);
    this._nextToken = data.meta.next_token;
    this._previousToken = data.meta.previous_token;
    this.hasMore = data.meta.next_token ? true : false;
    if (data.meta.result_count === 0)
        return composedTweets;
    const rawTweets = data.data;
    const rawIncludes = data.includes;
    for (const rawTweet of rawTweets) {
        const tweet = this.client.tweets._add(rawTweet.id, { data: rawTweet, includes: rawIncludes }, false);
        composedTweets.set(tweet.id, tweet);
    }
    return composedTweets;
};
//# sourceMappingURL=ComposedTweetsBook.js.map