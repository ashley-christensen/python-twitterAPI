"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _QuoteTweetsBook_instances, _QuoteTweetsBook_fetchPages;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuoteTweetsBook = void 0;
const errors_1 = require("../errors");
const structures_1 = require("../structures");
const BaseBook_1 = require("./BaseBook");
const util_1 = require("../util");
class QuoteTweetsBook extends BaseBook_1.BaseBook {
    constructor(client, options) {
        super(client, options);
        _QuoteTweetsBook_instances.add(this);
        this.tweetId = options.tweetId;
    }
    async fetchNextPage() {
        if (!this._hasMadeInitialRequest) {
            this._hasMadeInitialRequest = true;
            return __classPrivateFieldGet(this, _QuoteTweetsBook_instances, "m", _QuoteTweetsBook_fetchPages).call(this);
        }
        if (!this._nextToken)
            throw new errors_1.CustomError('PAGINATED_RESPONSE_TAIL_REACHED');
        return __classPrivateFieldGet(this, _QuoteTweetsBook_instances, "m", _QuoteTweetsBook_fetchPages).call(this, this._nextToken);
    }
}
exports.QuoteTweetsBook = QuoteTweetsBook;
_QuoteTweetsBook_instances = new WeakSet(), _QuoteTweetsBook_fetchPages = async function _QuoteTweetsBook_fetchPages(token) {
    const quoteTweets = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.tweetExpansions,
        max_results: this.maxResultsPerPage ?? undefined,
        'media.fields': queryParameters?.mediaFields,
        pagination_token: token,
        'place.fields': queryParameters?.placeFields,
        'poll.fields': queryParameters?.pollFields,
        'tweet.fields': queryParameters?.tweetFields,
        'user.fields': queryParameters?.userFields,
    };
    const requestData = new structures_1.RequestData({ query });
    const data = await this.client._api
        .tweets(this.tweetId)
        .quote_tweets.get(requestData);
    this._nextToken = data.meta.next_token;
    this.hasMore = data.meta.next_token ? true : false;
    if (data.meta.result_count === 0)
        return quoteTweets;
    const rawTweets = data.data;
    const rawIncludes = data.includes;
    for (const rawTweet of rawTweets) {
        const tweet = this.client.tweets._add(rawTweet.id, { data: rawTweet, includes: rawIncludes }, false);
        quoteTweets.set(tweet.id, tweet);
    }
    return quoteTweets;
};
//# sourceMappingURL=QuoteTweetsBook.js.map