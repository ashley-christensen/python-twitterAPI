"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomErrors = exports.regsiterErrorMessage = exports.formatErrorMessage = exports.makeTwitterjsError = void 0;
const errorMessagesMap = new Map();
function makeTwitterjsError(Base) {
    return class TwitterjsError extends Base {
        constructor(key, ...args) {
            super(formatErrorMessage(key, args));
            this.code = key;
            if (Error.captureStackTrace)
                Error.captureStackTrace(this, TwitterjsError);
        }
        get name() {
            return `${super.name} [${this.code}]`;
        }
    };
}
exports.makeTwitterjsError = makeTwitterjsError;
function formatErrorMessage(key, args) {
    if (typeof key !== 'string')
        throw new Error('Error message key must be a string');
    const errorMessage = errorMessagesMap.get(key);
    if (!errorMessage)
        throw new Error(`An invalid error message key was used: ${key}.`);
    if (typeof errorMessage === 'function')
        return errorMessage(...args);
    if (typeof args === 'undefined' || args.length === 0)
        return errorMessage;
    args.unshift(errorMessage);
    return args.toString();
}
exports.formatErrorMessage = formatErrorMessage;
function regsiterErrorMessage(key, message) {
    return errorMessagesMap.set(key, typeof message === 'function' ? message : String(message));
}
exports.regsiterErrorMessage = regsiterErrorMessage;
exports.CustomErrors = {
    CustomError: makeTwitterjsError(Error),
    CustomTypeError: makeTwitterjsError(TypeError),
    CustomRangeError: makeTwitterjsError(RangeError),
};
//# sourceMappingURL=TwitterjsError.js.map