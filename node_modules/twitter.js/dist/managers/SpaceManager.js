"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SpaceManager_instances, _SpaceManager_fetchSingleSpaceById, _SpaceManager_fetchMultipleSpacesByIds;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceManager = void 0;
const util_1 = require("../util");
const BaseManager_1 = require("./BaseManager");
const errors_1 = require("../errors");
const structures_1 = require("../structures");
class SpaceManager extends BaseManager_1.BaseManager {
    constructor(client) {
        super(client, structures_1.Space);
        _SpaceManager_instances.add(this);
    }
    async fetch(spaceOrSpaces, options) {
        if (Array.isArray(spaceOrSpaces)) {
            const spaceIds = spaceOrSpaces.map(space => {
                const spaceId = this.resolveId(space);
                if (!spaceId)
                    throw new errors_1.CustomError('SPACE_RESOLVE_ID', 'fetch');
                return spaceId;
            });
            return __classPrivateFieldGet(this, _SpaceManager_instances, "m", _SpaceManager_fetchMultipleSpacesByIds).call(this, spaceIds, options);
        }
        const spaceId = this.resolveId(spaceOrSpaces);
        if (!spaceId)
            throw new errors_1.CustomError('SPACE_RESOLVE_ID', 'fetch');
        return __classPrivateFieldGet(this, _SpaceManager_instances, "m", _SpaceManager_fetchSingleSpaceById).call(this, spaceId, options);
    }
    async fetchByCreators(creatorOrCreators, options) {
        let userIds;
        if (Array.isArray(creatorOrCreators)) {
            userIds = creatorOrCreators.map(user => {
                const userId = this.client.users.resolveId(user);
                if (!userId)
                    throw new errors_1.CustomTypeError('USER_RESOLVE_ID', 'fetch spaces of');
                return userId;
            });
        }
        else {
            const userId = this.client.users.resolveId(creatorOrCreators);
            if (!userId)
                throw new errors_1.CustomTypeError('USER_RESOLVE_ID', 'fetch spaces of');
            userIds = [userId];
        }
        const fetchedSpaces = new util_1.Collection();
        const queryParameters = this.client.options.queryParameters;
        const query = {
            user_ids: userIds,
            expansions: queryParameters?.spaceExpansions,
            'user.fields': queryParameters?.userFields,
            'space.fields': queryParameters?.spaceFields,
        };
        const requestData = new structures_1.RequestData({ query });
        const res = await this.client._api.spaces.by.creator_ids.get(requestData);
        if (res.meta.result_count === 0)
            return fetchedSpaces;
        const rawSpaces = res.data;
        const rawSpacesIncludes = res.includes;
        for (const rawSpace of rawSpaces) {
            const space = this._add(rawSpace.id, { data: rawSpace, includes: rawSpacesIncludes }, options?.cacheAfterFetching);
            fetchedSpaces.set(space.id, space);
        }
        return fetchedSpaces;
    }
    async search(queryString, options) {
        const fetchedSpaces = new util_1.Collection();
        const queryParameters = this.client.options.queryParameters;
        const query = {
            query: queryString,
            expansions: queryParameters?.spaceExpansions,
            max_results: options?.maxResults,
            'space.fields': queryParameters?.spaceFields,
            state: options?.state,
            'user.fields': queryParameters?.userFields,
        };
        const requestData = new structures_1.RequestData({ query });
        const res = await this.client._api.spaces.search.get(requestData);
        if (res.meta.result_count === 0)
            return fetchedSpaces;
        const rawSpaces = res.data;
        const rawSpacesIncludes = res.includes;
        for (const rawSpace of rawSpaces) {
            const space = this._add(rawSpace.id, { data: rawSpace, includes: rawSpacesIncludes }, options?.cacheAfterFetching);
            fetchedSpaces.set(space.id, space);
        }
        return fetchedSpaces;
    }
    async fetchSharedTweets(space, options) {
        const spaceId = this.resolveId(space);
        if (!spaceId)
            throw new errors_1.CustomError('SPACE_RESOLVE_ID');
        const fetchedTweets = new util_1.Collection();
        const queryParameters = this.client.options.queryParameters;
        const query = {
            expansions: queryParameters?.tweetExpansions,
            max_results: options?.maxResults,
            'media.fields': queryParameters?.mediaFields,
            'place.fields': queryParameters?.placeFields,
            'poll.fields': queryParameters?.pollFields,
            'tweet.fields': queryParameters?.tweetFields,
            'user.fields': queryParameters?.userFields,
        };
        const requestData = new structures_1.RequestData({ query });
        const res = await this.client._api.spaces(spaceId).tweets.get(requestData);
        if (res.meta.result_count === 0)
            return fetchedTweets;
        const rawTweets = res.data;
        const rawTweetsIncludes = res.includes;
        for (const rawTweet of rawTweets) {
            const tweet = this.client.tweets._add(rawTweet.id, { data: rawTweet, includes: rawTweetsIncludes }, options?.cacheAfterFetching);
            fetchedTweets.set(tweet.id, tweet);
        }
        return fetchedTweets;
    }
}
exports.SpaceManager = SpaceManager;
_SpaceManager_instances = new WeakSet(), _SpaceManager_fetchSingleSpaceById = async function _SpaceManager_fetchSingleSpaceById(spaceId, options) {
    if (!options?.skipCacheCheck) {
        const cachedSpace = this.cache.get(spaceId);
        if (cachedSpace)
            return cachedSpace;
    }
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.spaceExpansions,
        'space.fields': queryParameters?.spaceFields,
        'user.fields': queryParameters?.userFields,
    };
    const requestData = new structures_1.RequestData({ query });
    const res = await this.client._api.spaces(spaceId).get(requestData);
    return this._add(res.data.id, res, options?.cacheAfterFetching);
}, _SpaceManager_fetchMultipleSpacesByIds = async function _SpaceManager_fetchMultipleSpacesByIds(spaceIds, options) {
    const fetchedSpaces = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        ids: spaceIds,
        expansions: queryParameters?.spaceExpansions,
        'space.fields': queryParameters?.spaceFields,
        'user.fields': queryParameters?.userFields,
    };
    const requestData = new structures_1.RequestData({ query });
    const res = await this.client._api.spaces.get(requestData);
    const rawSpaces = res.data;
    const rawSpacesIncludes = res.includes;
    for (const rawSpace of rawSpaces) {
        const space = this._add(rawSpace.id, { data: rawSpace, includes: rawSpacesIncludes }, options?.cacheAfterFetching);
        fetchedSpaces.set(space.id, space);
    }
    return fetchedSpaces;
};
//# sourceMappingURL=SpaceManager.js.map