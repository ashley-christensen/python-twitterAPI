"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TweetManager_instances, _TweetManager_fetchSingleTweetById, _TweetManager_fetchMultipleTweetsByIds, _TweetManager_editTweetReplyVisibility;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetManager = void 0;
const util_1 = require("../util");
const BaseManager_1 = require("./BaseManager");
const structures_1 = require("../structures");
const errors_1 = require("../errors");
class TweetManager extends BaseManager_1.BaseManager {
    constructor(client) {
        super(client, structures_1.Tweet);
        _TweetManager_instances.add(this);
    }
    resolve(tweetResolvable) {
        const tweet = super.resolve(tweetResolvable);
        if (tweet)
            return tweet;
        if (tweetResolvable instanceof structures_1.SimplifiedTweet)
            return super.resolve(tweetResolvable.id);
        return null;
    }
    resolveId(tweetResolvable) {
        const tweetId = super.resolveId(tweetResolvable);
        if (typeof tweetId === 'string')
            return tweetId;
        if (tweetResolvable instanceof structures_1.SimplifiedTweet)
            return tweetResolvable.id;
        return null;
    }
    async fetch(tweetOrTweets, options) {
        if (Array.isArray(tweetOrTweets)) {
            const tweetIds = tweetOrTweets.map(tweet => {
                const tweetId = this.resolveId(tweet);
                if (!tweetId)
                    throw new errors_1.CustomError('TWEET_RESOLVE_ID', 'fetch');
                return tweetId;
            });
            return __classPrivateFieldGet(this, _TweetManager_instances, "m", _TweetManager_fetchMultipleTweetsByIds).call(this, tweetIds, options);
        }
        const tweetId = this.resolveId(tweetOrTweets);
        if (!tweetId)
            throw new errors_1.CustomError('TWEET_RESOLVE_ID', 'fetch');
        return __classPrivateFieldGet(this, _TweetManager_instances, "m", _TweetManager_fetchSingleTweetById).call(this, tweetId, options);
    }
    async like(tweet) {
        const tweetId = this.resolveId(tweet);
        if (!tweetId)
            throw new errors_1.CustomError('TWEET_RESOLVE_ID', 'like');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const body = {
            tweet_id: tweetId,
        };
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.users(loggedInUser.id).likes.post(requestData);
        return res.data;
    }
    async unlike(tweet) {
        const tweetId = this.resolveId(tweet);
        if (!tweetId)
            throw new errors_1.CustomError('TWEET_RESOLVE_ID', 'unlike');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const requestData = new structures_1.RequestData({ isUserContext: true });
        const res = await this.client._api
            .users(loggedInUser.id)
            .likes(tweetId)
            .delete(requestData);
        return res.data;
    }
    async hide(tweet) {
        return __classPrivateFieldGet(this, _TweetManager_instances, "m", _TweetManager_editTweetReplyVisibility).call(this, tweet, 'hidden');
    }
    async unhide(tweet) {
        return __classPrivateFieldGet(this, _TweetManager_instances, "m", _TweetManager_editTweetReplyVisibility).call(this, tweet, 'unhidden');
    }
    async retweet(tweet) {
        const tweetId = this.resolveId(tweet);
        if (!tweetId)
            throw new errors_1.CustomError('TWEET_RESOLVE_ID', 'retweet');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const body = {
            tweet_id: tweetId,
        };
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.users(loggedInUser.id).retweets.post(requestData);
        return res.data;
    }
    async unRetweet(tweet) {
        const tweetId = this.resolveId(tweet);
        if (!tweetId)
            throw new errors_1.CustomError('TWEET_RESOLVE_ID', 'remove retweet');
        const loggedInUser = this.client.me;
        if (!loggedInUser)
            throw new errors_1.CustomError('NO_LOGGED_IN_USER');
        const requestData = new structures_1.RequestData({ isUserContext: true });
        const res = await this.client._api
            .users(loggedInUser.id)
            .retweets(tweetId)
            .delete(requestData);
        return res.data;
    }
    async create(options) {
        const body = new structures_1.TweetPayload(this.client, options).resolveData();
        const requestData = new structures_1.RequestData({ body, isUserContext: true });
        const res = await this.client._api.tweets.post(requestData);
        return res.data;
    }
    async delete(tweet) {
        const tweetId = this.resolveId(tweet);
        if (!tweetId)
            throw new errors_1.CustomError('TWEET_RESOLVE_ID', 'delete');
        const requestData = new structures_1.RequestData({ isUserContext: true });
        const res = await this.client._api.tweets(tweetId).delete(requestData);
        return res.data;
    }
}
exports.TweetManager = TweetManager;
_TweetManager_instances = new WeakSet(), _TweetManager_fetchSingleTweetById = async function _TweetManager_fetchSingleTweetById(tweetId, options) {
    if (!options?.skipCacheCheck) {
        const cachedTweet = this.cache.get(tweetId);
        if (cachedTweet)
            return cachedTweet;
    }
    const queryParameters = this.client.options.queryParameters;
    const query = {
        expansions: queryParameters?.tweetExpansions,
        'media.fields': queryParameters?.mediaFields,
        'place.fields': queryParameters?.placeFields,
        'poll.fields': queryParameters?.pollFields,
        'tweet.fields': queryParameters?.tweetFields,
        'user.fields': queryParameters?.userFields,
    };
    const requestData = new structures_1.RequestData({ query });
    const res = await this.client._api.tweets(tweetId).get(requestData);
    return this._add(res.data.id, res, options?.cacheAfterFetching);
}, _TweetManager_fetchMultipleTweetsByIds = async function _TweetManager_fetchMultipleTweetsByIds(tweetIds, options) {
    const fetchedTweets = new util_1.Collection();
    const queryParameters = this.client.options.queryParameters;
    const query = {
        ids: tweetIds,
        expansions: queryParameters?.tweetExpansions,
        'media.fields': queryParameters?.mediaFields,
        'place.fields': queryParameters?.placeFields,
        'poll.fields': queryParameters?.pollFields,
        'tweet.fields': queryParameters?.tweetFields,
        'user.fields': queryParameters?.userFields,
    };
    const requestData = new structures_1.RequestData({ query });
    const res = await this.client._api.tweets.get(requestData);
    const rawTweets = res.data;
    const rawTweetsIncludes = res.includes;
    for (const rawTweet of rawTweets) {
        const tweet = this._add(rawTweet.id, { data: rawTweet, includes: rawTweetsIncludes }, options?.cacheAfterFetching);
        fetchedTweets.set(tweet.id, tweet);
    }
    return fetchedTweets;
}, _TweetManager_editTweetReplyVisibility = async function _TweetManager_editTweetReplyVisibility(tweet, visibility) {
    const tweetId = this.resolveId(tweet);
    if (!tweetId)
        throw new errors_1.CustomError('TWEET_RESOLVE_ID', `${visibility === 'hidden' ? 'hide' : 'unhide'}`);
    const body = {
        hidden: visibility === 'hidden' ? true : false,
    };
    const requestData = new structures_1.RequestData({ body, isUserContext: true });
    const res = await this.client._api.tweets(tweetId).hidden.put(requestData);
    return res.data;
};
//# sourceMappingURL=TweetManager.js.map