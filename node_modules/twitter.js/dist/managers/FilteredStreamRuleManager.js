"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FilteredStreamRuleManager_instances, _FilteredStreamRuleManager_deleteRules, _FilteredStreamRuleManager_fetchSingleRuleById, _FilteredStreamRuleManager_fetchMultipleRulesByIds;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilteredStreamRuleManager = void 0;
const util_1 = require("../util");
const BaseManager_1 = require("./BaseManager");
const errors_1 = require("../errors");
const structures_1 = require("../structures");
class FilteredStreamRuleManager extends BaseManager_1.BaseManager {
    constructor(client) {
        super(client, structures_1.FilteredStreamRule);
        _FilteredStreamRuleManager_instances.add(this);
    }
    async fetch(ruleOrRules, options) {
        if (Array.isArray(ruleOrRules)) {
            if (ruleOrRules.length) {
                const ruleIds = ruleOrRules.map(rule => {
                    const ruleId = this.resolveId(rule);
                    if (!ruleId)
                        throw new errors_1.CustomError('RULE_RESOLVE_ID', 'fetch');
                    return ruleId;
                });
                return __classPrivateFieldGet(this, _FilteredStreamRuleManager_instances, "m", _FilteredStreamRuleManager_fetchMultipleRulesByIds).call(this, ruleIds, options);
            }
            return __classPrivateFieldGet(this, _FilteredStreamRuleManager_instances, "m", _FilteredStreamRuleManager_fetchMultipleRulesByIds).call(this, [], options);
        }
        const ruleId = this.resolveId(ruleOrRules);
        if (!ruleId)
            throw new errors_1.CustomError('RULE_RESOLVE_ID', 'fetch');
        return __classPrivateFieldGet(this, _FilteredStreamRuleManager_instances, "m", _FilteredStreamRuleManager_fetchSingleRuleById).call(this, ruleId, options);
    }
    async create(data) {
        const rules = Array.isArray(data) ? data : [data];
        const body = {
            add: rules,
        };
        const requestData = new structures_1.RequestData({ body });
        const res = await this.client._api.tweets.search.stream.rules.post(requestData);
        return (res.data?.reduce((createdRules, rawRule) => {
            const rule = this._add(rawRule.id, rawRule);
            return createdRules.set(rule.id, rule);
        }, new util_1.Collection()) ?? new util_1.Collection());
    }
    async deleteById(ruleIdOrIds) {
        const ids = Array.isArray(ruleIdOrIds) ? ruleIdOrIds : [ruleIdOrIds];
        const body = {
            delete: {
                ids,
            },
        };
        return __classPrivateFieldGet(this, _FilteredStreamRuleManager_instances, "m", _FilteredStreamRuleManager_deleteRules).call(this, body);
    }
    async deleteByValue(ruleValueOrValues) {
        const values = Array.isArray(ruleValueOrValues) ? ruleValueOrValues : [ruleValueOrValues];
        const body = {
            delete: {
                values,
            },
        };
        return __classPrivateFieldGet(this, _FilteredStreamRuleManager_instances, "m", _FilteredStreamRuleManager_deleteRules).call(this, body);
    }
}
exports.FilteredStreamRuleManager = FilteredStreamRuleManager;
_FilteredStreamRuleManager_instances = new WeakSet(), _FilteredStreamRuleManager_deleteRules = async function _FilteredStreamRuleManager_deleteRules(body) {
    const requestData = new structures_1.RequestData({ body });
    const res = await this.client._api.tweets.search.stream.rules.post(requestData);
    return res;
}, _FilteredStreamRuleManager_fetchSingleRuleById = async function _FilteredStreamRuleManager_fetchSingleRuleById(ruleId, options) {
    if (!options?.skipCacheCheck) {
        const cachedRule = this.cache.get(ruleId);
        if (cachedRule)
            return cachedRule;
    }
    const query = {
        ids: [ruleId],
    };
    const requestData = new structures_1.RequestData({ query });
    const res = await this.client._api.tweets.search.stream.rules.get(requestData);
    const rawRule = res.data?.[0];
    if (!rawRule)
        throw new errors_1.CustomError('RULE_NOT_FOUND');
    return this._add(rawRule.id, rawRule, options?.cacheAfterFetching);
}, _FilteredStreamRuleManager_fetchMultipleRulesByIds = async function _FilteredStreamRuleManager_fetchMultipleRulesByIds(ruleIds, options) {
    if (!Array.isArray(ruleIds))
        throw new errors_1.CustomTypeError('INVALID_TYPE', 'rulesIds', 'array', true);
    const fetchedRules = new util_1.Collection();
    const query = {
        ids: ruleIds.length ? ruleIds : undefined,
    };
    const requestData = new structures_1.RequestData({ query });
    const res = await this.client._api.tweets.search.stream.rules.get(requestData);
    const rawRules = res.data;
    if (!rawRules?.length)
        return fetchedRules;
    for (const rawRule of rawRules) {
        const rule = this._add(rawRule.id, rawRule, options?.cacheAfterFetching);
        fetchedRules.set(rule.id, rule);
    }
    return fetchedRules;
};
//# sourceMappingURL=FilteredStreamRuleManager.js.map