"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.APIRequest = void 0;
const undici_1 = require("undici");
class APIRequest {
    constructor(rest, method, path, options) {
        this.rest = rest;
        this.method = method;
        this.path = path;
        this.options = options;
        this.route = options.route;
        Object.defineProperty(this, 'client', { writable: true, enumerable: false });
        this.client = rest.client;
        this.isStreaming = options.isStreaming;
        if (options.query && typeof options.query === 'object') {
            const queryString = Object.entries(options.query)
                .filter(([, value]) => value !== null && typeof value !== 'undefined')
                .map(([key, value]) => (Array.isArray(value) ? `${key}=${value.join(',')}` : `${key}=${value}`))
                .join('&');
            this.path = `${path}?${queryString}`;
        }
    }
    async make() {
        const baseURL = `${this.client.options.api?.baseURL}/${this.client.options.api?.version}`;
        const url = baseURL + this.path;
        const headers = {};
        headers.Authorization = this.options.isUserContext
            ? this.rest.getUserContextAuth(this.method, url)
            : this.rest.getBearerAuth();
        let body;
        if (this.method !== 'get' && this.options.body) {
            body = JSON.stringify(this.options.body);
            headers['Content-Type'] = 'application/json';
        }
        return (0, undici_1.fetch)(url, {
            method: this.method,
            keepalive: true,
            headers,
            body,
        });
    }
}
exports.APIRequest = APIRequest;
//# sourceMappingURL=APIRequest.js.map