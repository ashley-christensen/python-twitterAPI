"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TwitterAPIError_instances, _TwitterAPIError_patchErrors;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TwitterAPIError = void 0;
class TwitterAPIError extends Error {
    constructor(data) {
        super(data.detail);
        _TwitterAPIError_instances.add(this);
        this.title = data.title;
        this.detail = data.detail;
        this.type = data.type;
        this.scope = 'scope' in data ? data.scope : null;
        this.value = 'value' in data ? data.value : null;
        this.field = 'field' in data ? data.field : null;
        this.status = 'status' in data ? data.status : null;
        this.period = 'period' in data ? data.period : null;
        this.reason = 'reason' in data ? data.reason : null;
        this.section = 'section' in data ? data.section : null;
        this.parameter = 'parameter' in data ? data.parameter : null;
        this.resource_id = 'resource_id' in data ? data.resource_id : null;
        this.resource_type = 'resource_type' in data ? data.resource_type : null;
        this.disconnect_type = 'disconnect_type' in data ? data.disconnect_type : null;
        this.registration_url = 'registration_url' in data ? data.registration_url : null;
        this.connection_issue = 'connection_issue' in data ? data.connection_issue : null;
        this.errors = 'errors' in data ? __classPrivateFieldGet(this, _TwitterAPIError_instances, "m", _TwitterAPIError_patchErrors).call(this, data.errors) : null;
    }
    get name() {
        return `${this.constructor.name} [${this.title}]`;
    }
}
exports.TwitterAPIError = TwitterAPIError;
_TwitterAPIError_instances = new WeakSet(), _TwitterAPIError_patchErrors = function _TwitterAPIError_patchErrors(errors) {
    const errorsObject = {};
    for (const [i, error] of errors.entries()) {
        errorsObject[i] = error.message;
    }
    return errorsObject;
};
//# sourceMappingURL=TwitterAPIError.js.map