"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESTManager = void 0;
const node_crypto_1 = __importDefault(require("node:crypto"));
const oauth_1_0a_1 = __importDefault(require("oauth-1.0a"));
const util_1 = require("../util");
const errors_1 = require("../errors");
const APIRouter_1 = require("./APIRouter");
const APIRequest_1 = require("./APIRequest");
const RequestHandler_1 = require("./RequestHandler");
class RESTManager {
    constructor(client) {
        Object.defineProperty(this, 'client', { writable: true, enumerable: false });
        this.client = client;
        this.requestHandlers = new util_1.Collection();
    }
    get routeBuilder() {
        return (0, APIRouter_1.buildRoute)(this);
    }
    get baseURL() {
        return this.client.options.api?.baseURL;
    }
    getBearerAuth() {
        const client = this.client;
        if (!client.token)
            throw new errors_1.CustomError('NO_BEARER_TOKEN');
        return `Bearer ${client.token}`;
    }
    getUserContextAuth(method, url) {
        const client = this.client;
        const clientCredentials = client.credentials;
        if (!clientCredentials)
            throw new errors_1.CustomError('NO_CLIENT_CREDENTIALS');
        const oauth = new oauth_1_0a_1.default({
            consumer: {
                key: clientCredentials.consumerKey,
                secret: clientCredentials.consumerSecret,
            },
            signature_method: 'HMAC-SHA1',
            hash_function(base_string, key) {
                return node_crypto_1.default.createHmac('sha1', key).update(base_string).digest('base64');
            },
        });
        return oauth.toHeader(oauth.authorize({
            url: url.toString(),
            method: method,
        }, {
            key: clientCredentials.accessToken,
            secret: clientCredentials.accessTokenSecret,
        })).Authorization;
    }
    async request(method, path, options) {
        const apiRequest = new APIRequest_1.APIRequest(this, method, path, options);
        let handler = this.requestHandlers.get(apiRequest.route);
        if (!handler) {
            handler = new RequestHandler_1.RequestHandler(this);
            this.requestHandlers.set(apiRequest.route, handler);
        }
        return handler.push(apiRequest);
    }
}
exports.RESTManager = RESTManager;
//# sourceMappingURL=RESTManager.js.map