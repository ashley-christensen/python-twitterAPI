import { Collection } from '../util';
import { BaseManager, type BaseFetchOptions } from './BaseManager';
import { SimplifiedTweet, Tweet } from '../structures';
import type { Client } from '../client';
import type { APITweetReplySettings, DELETETweetsIdResponse, DELETEUsersIdLikesTweetIdResponse, DELETEUsersIdRetweetsSourceTweetIdResponse, POSTTweetsResponse, POSTUsersIdLikesResponse, POSTUsersIdRetweetsResponse, PUTTweetsIdHiddenResponse } from 'twitter-types';
import type { UserResolvable } from './UserManager';
/**
 * The manager class that holds API methods for {@link Tweet} objects and stores their cache
 */
export declare class TweetManager extends BaseManager<string, TweetResolvable, Tweet> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Resolves a tweet resolvable to its respective {@link Tweet} object.
     * @param tweetResolvable An Id or instance that can be resolved to a tweet object
     * @returns The resolved tweet object
     */
    resolve(tweetResolvable: TweetResolvable): Tweet | null;
    /**
     * Resolves a tweet resolvable to its respective id.
     * @param tweetResolvable An Id or instance that can be resolved to a tweet object
     * @returns The id of the resolved tweet object
     */
    resolveId(tweetResolvable: TweetResolvable): string | null;
    /**
     * Fetches one or more tweets.
     * @param tweetOrTweets The tweet or tweets to fetch
     * @param options An object containing optional parameters to apply
     * @returns A {@link Tweet} or a {@link Collection} of them
     * @example
     * // Fetch a single tweet
     * const tweet = await client.tweets.fetch('1336749579228745728');
     *
     * // Fetch multiple tweets
     * const tweets = await client.tweets.fetch(['1336749579228745728', '1413113670448553986']);
     */
    fetch<T extends TweetResolvable | Array<TweetResolvable>>(tweetOrTweets: T, options?: FetchTweetOrTweetsOptions<T>): Promise<TweetManagerFetchResult<T>>;
    /**
     * Likes a tweet.
     * @param tweet The tweet to like
     * @returns An object containing the `liked` field
     * @example
     * const data = await client.tweets.like('1336749579228745728');
     * console.log(data); // { liked: true }
     */
    like(tweet: TweetResolvable): Promise<POSTUsersIdLikesResponse['data']>;
    /**
     * Unlikes a tweet.
     * @param tweet The tweet to unlike
     * @returns An object containing the `liked` field
     * @example
     * const data = await client.tweets.unlike('1336749579228745728');
     * console.log(data); // { liked: false }
     */
    unlike(tweet: TweetResolvable): Promise<DELETEUsersIdLikesTweetIdResponse['data']>;
    /**
     * Hides a reply to a tweet created by the authorized user.
     * @param tweet The reply to hide
     * @returns An object containing the `hidden` field
     * @example
     * const data = await client.tweets.hide('1487374434654912517');
     * console.log(data); // { hidden: true }
     */
    hide(tweet: TweetResolvable): Promise<PUTTweetsIdHiddenResponse['data']>;
    /**
     * Unhides a reply to a tweet created by the authorized user.
     * @param tweet The reply to unhide
     * @returns An object containing the `hidden` field
     * @example
     * const data = await client.tweets.unhide('1487374434654912517');
     * console.log(data); // { hidden: false }
     */
    unhide(tweet: TweetResolvable): Promise<PUTTweetsIdHiddenResponse['data']>;
    /**
     * Retweets a tweet.
     * @param tweet The tweet to retweet
     * @returns An object containing the `retweeted` field
     * @example
     * const data = await client.tweets.retweet('1482736526950023178');
     * console.log(data); // { retweeted: true }
     */
    retweet(tweet: TweetResolvable): Promise<POSTUsersIdRetweetsResponse['data']>;
    /**
     * Removes the retweet of a tweet.
     * @param tweet The tweet whose retweet is to be removed
     * @returns An object containing the `retweeted` field
     * @example
     * const data = await client.tweets.unRetweet('1482736526950023178');
     * console.log(data); // { retweeted: false }
     */
    unRetweet(tweet: TweetResolvable): Promise<DELETEUsersIdRetweetsSourceTweetIdResponse['data']>;
    /**
     * Creates a new tweet.
     * @param options The options for creating the tweet
     * @returns The id and text of the created tweet
     * @example
     * const data = await client.tweets.create({ text: 'This is a tweet' });
     * console.log(data); // { id: '1487382074546089985', text: 'This is a tweet' }
     */
    create(options: TweetCreateOptions): Promise<POSTTweetsResponse['data']>;
    /**
     * Deletes a tweet created by the authorized user.
     * @param tweet The tweet to delete
     * @returns An object containing the `deleted` field
     * @example
     * const data = await client.tweets.delete('1487382074546089985');
     * console.log(data); // { deleted: true }
     */
    delete(tweet: TweetResolvable): Promise<DELETETweetsIdResponse['data']>;
}
/**
 * Options used to feth a single tweet
 */
export declare type FetchTweetOptions = BaseFetchOptions;
/**
 * Options used to feth multiple tweets
 */
export declare type FetchTweetsOptions = Omit<BaseFetchOptions, 'skipCacheCheck'>;
/**
 * Options used to fetch one or more tweets
 */
export declare type FetchTweetOrTweetsOptions<T extends TweetResolvable | Array<TweetResolvable>> = T extends TweetResolvable ? FetchTweetOptions : FetchTweetsOptions;
export declare type TweetManagerFetchResult<T extends TweetResolvable | Array<TweetResolvable>> = T extends TweetResolvable ? Tweet : Collection<string, Tweet>;
/**
 * Options used to craete a tweet
 */
export interface TweetCreateOptions {
    directMessageDeepLink?: string;
    forSuperFollowersOnly?: boolean;
    geo?: TweetCreateGeoOptions;
    media?: TweetCreateMediaOptions;
    poll?: TweetCreatePollOptions;
    quoteTweet?: TweetResolvable;
    excludeReplyUsers?: Array<UserResolvable>;
    inReplyToTweet?: TweetResolvable;
    replySettings?: APITweetReplySettings;
    text?: string;
}
export interface TweetCreateGeoOptions {
    placeId: string;
}
export interface TweetCreateMediaOptions {
    mediaIds?: Array<string>;
    taggedUsers?: Array<UserResolvable>;
}
export interface TweetCreatePollOptions {
    durationMinutes: number;
    options: Array<string>;
}
export declare type TweetResolvable = Tweet | SimplifiedTweet | string;
//# sourceMappingURL=TweetManager.d.ts.map