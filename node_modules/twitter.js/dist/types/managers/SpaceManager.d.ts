import { Collection } from '../util';
import { BaseManager, type BaseFetchOptions } from './BaseManager';
import { type SimplifiedSpace, Space, type Tweet } from '../structures';
import type { Client } from '../client';
import type { GETSpacesSearchQuery } from 'twitter-types';
import type { UserResolvable } from './UserManager';
/**
 * The manager class that holds API methods for {@link Space} objects and stores their cache
 */
export declare class SpaceManager extends BaseManager<string, SpaceResolvable, Space> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Fetches one or more spaces.
     * @param spaceOrSpaces The space or spaces to fetch
     * @param options An object containing optional parameters to apply
     * @returns A {@link Space} or a {@link Collection} of them
     * @example
     * const space = await client.spaces.fetch('1OdJrBwXgjXJX');
     */
    fetch<S extends SpaceResolvable | Array<SpaceResolvable>>(spaceOrSpaces: S, options?: FetchSpaceOrSpacesOptions<S>): Promise<SpaceManagerFetchResult<S>>;
    /**
     * Fetches live or scheduled spaces created by a user or users.
     * @param creatorOrCreators The user or users whose created live or scheduled spaces are to be fetched
     * @param options An object containing optional parameters to apply
     * @returns A {@link Collection} of {@link Space}
     * @example
     * // Fetch live or scheduled spaces created by a user
     * const spaces = await client.spaces.fetchByCreators('1253316035878375424');
     *
     * // Fetch live or scheduled spaces created by multiple users
     * const spaces = await client.spaces.fetchByCreators(['1253316035878375424', '6253282']);
     */
    fetchByCreators(creatorOrCreators: UserResolvable | Array<UserResolvable>, options?: FetchSpacesByCreatorsOptions): Promise<Collection<string, Space>>;
    /**
     * Fetches spaces using search query.
     * @param queryString Any text (including mentions and hashtags) present in the title of the spaces to fetch
     * @param options An object containing optional parameters to apply
     * @returns A {@link Collection} of {@link Space}
     * @example
     * // Fetch all the spaces that have the term "Twitter" in their title
     * const spaces = await client.spaces.search('Twitter');
     *
     * // Fetch all the live spaces that have the term "Twitter" in their title
     * const spaces = await client.spaces.search('Twitter', { state: 'live' });
     */
    search(queryString: string, options?: SearchSpacesOptions): Promise<Collection<string, Space>>;
    /**
     * Fetches tweets shared in a space.
     * @param space The space whose shared tweets are to be fetched
     * @param options An object containing optional parameters to apply
     * @returns A {@link Collection} of {@link Tweet}
     * @example
     * const tweets = await client.spaces.fetchSharedTweets('1DXxyRYNejbKM');
     */
    fetchSharedTweets(space: SpaceResolvable, options?: FetchSpaceSharedTweetsOptions): Promise<Collection<string, Tweet>>;
}
/**
 * Options used to fetch tweets shared in a space
 */
export interface FetchSpaceSharedTweetsOptions extends Omit<BaseFetchOptions, 'skipCacheCheck'> {
    /**
     * The maximum number of tweets to fetch
     */
    maxResults?: number;
}
/**
 * Options used to fetch a single space
 */
export declare type FetchSpaceOptions = BaseFetchOptions;
/**
 * Options used to fetch multiple spaces
 */
export declare type FetchSpacesOptions = Omit<BaseFetchOptions, 'skipCacheCheck'>;
/**
 * Options used to fetch one or more spaces
 */
export declare type FetchSpaceOrSpacesOptions<S extends SpaceResolvable | Array<SpaceResolvable>> = S extends SpaceResolvable ? FetchSpaceOptions : FetchSpacesOptions;
export declare type SpaceManagerFetchResult<S extends SpaceResolvable | Array<SpaceResolvable>> = S extends SpaceResolvable ? Space : Collection<string, Space>;
/**
 * Options used to fetch live or scheduled spaces created by a user or users
 */
export declare type FetchSpacesByCreatorsOptions = Omit<BaseFetchOptions, 'skipCacheCheck'>;
/**
 * Options used to search spaces
 */
export interface SearchSpacesOptions extends Omit<BaseFetchOptions, 'skipCacheCheck'> {
    /**
     * The state of the spaces to match
     * @default 'all'
     */
    state?: GETSpacesSearchQuery['state'];
    /**
     * The number of maximum spaces to fetch
     */
    maxResults?: number;
}
export declare type SpaceResolvable = Space | SimplifiedSpace | string;
//# sourceMappingURL=SpaceManager.d.ts.map