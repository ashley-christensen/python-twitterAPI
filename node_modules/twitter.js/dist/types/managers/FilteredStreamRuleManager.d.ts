import { Collection } from '../util';
import { type BaseFetchOptions, BaseManager } from './BaseManager';
import { FilteredStreamRule } from '../structures';
import type { Client } from '../client';
import type { POSTTweetsSearchStreamRulesResponse } from 'twitter-types';
export declare class FilteredStreamRuleManager extends BaseManager<string, FilteredStreamRuleResolvable, FilteredStreamRule> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Fetches one or multiple rules that are currently active. Fetches all active rules if `rulesOrRules` is an empty array.
     * @param ruleOrRules The rule or rules to fetch or an empty array
     * @param options An object containing optional parameters to apply
     * @returns A {@link FilteredStreamRule} or a {@link Collection} of them
     * @example
     * // Fetch a single active rule
     * const rule = await client.filteredStreamRules.fetch('1459555165208338435');
     *
     * // Fetch multiple active rules
     * const rules = await client.filteredStreamRules.fetch(['1459555165208338435', '1488046998351925250']);
     *
     * // Fetch all active rules
     * const rules = await client.filteredStreamRules.fetch([]);
     */
    fetch<R extends FilteredStreamRuleResolvable | Array<FilteredStreamRuleResolvable>>(ruleOrRules: R, options?: FetchFilteredStreamRuleOrRulesOptions<R>): Promise<FilteredStreamRuleManagerFetchResult<R>>;
    /**
     * Creates one or more rules for the filtered stream.
     * @param data The data for creating one or more rules
     * @returns A {@link Collection} of {@link FilteredStreamRule}
     * @example
     * // Create a single rule
     * const rule = await client.filteredStreamRules.create({ value: '@iShiibi', tag: 'Tweets mentioning the user iShiibi' });
     *
     * // Create multiple rules
     * const rules = await client.filteredStreamRules.create([
     * { value: 'from:iShiibi', tag: 'Tweets created by the user iShiibi' },
     * { value: 'to:TwitterAPI', tag: 'Tweets that are replies to tweets created by the user TwitterAPI' },
     * ]);
     */
    create(data: FilteredStreamRuleData | Array<FilteredStreamRuleData>): Promise<Collection<string, FilteredStreamRule>>;
    /**
     * Deletes one or more filtered stream rules using their ids.
     * @param ruleIdOrIds The id or ids of the rules to delete
     * @example
     * // Delete a single rule
     * const data = await client.filteredStreamRules.deleteById('1488053806785245187');
     *
     * // Delete multiple rules
     * const data = await client.filteredStreamRules.deleteById(['1488048453506957314', '1488053806785245186']);
     */
    deleteById(ruleIdOrIds: string | Array<string>): Promise<POSTTweetsSearchStreamRulesResponse>;
    /**
     * Deletes one or more filtered stream rules using their values.
     * @param ruleValueOrValues The value or values of the rules to delete
     * @example
     * // Delete a single rule
     * const data = await client.filteredStreamRules.deleteByValue('@iShiibi');
     *
     * // Delete multiple rules
     * const data = await client.filteredStreamRules.deleteByValue(['from:iShiibi', 'to:TwitterAPI']);
     */
    deleteByValue(ruleValueOrValues: string | Array<string>): Promise<POSTTweetsSearchStreamRulesResponse>;
}
/**
 * Options used to feth a single filtered stream rule
 */
export declare type FetchFilteredStreamRuleOptions = BaseFetchOptions;
/**
 * Options used to feth multiple filtered stream rules
 */
export declare type FetchFilteredStreamRulesOptions = Omit<BaseFetchOptions, 'skipCacheCheck'>;
/**
 * Options used to fetch one or more filter stream rules
 */
export declare type FetchFilteredStreamRuleOrRulesOptions<R extends FilteredStreamRuleResolvable | Array<FilteredStreamRuleResolvable>> = R extends FilteredStreamRuleResolvable ? FetchFilteredStreamRuleOptions : FetchFilteredStreamRulesOptions;
export declare type FilteredStreamRuleManagerFetchResult<R extends FilteredStreamRuleResolvable | Array<FilteredStreamRuleResolvable>> = R extends FilteredStreamRuleResolvable ? FilteredStreamRule : Collection<string, FilteredStreamRule>;
/**
 * Options used to create a new filtered stream rule
 */
export interface FilteredStreamRuleData {
    /**
     * The value of the rule
     * @see https://developer.twitter.com/en/docs/twitter-api/tweets/search/integrate/build-a-query
     */
    value: string;
    /**
     * The label of the rule
     */
    tag?: string;
}
export declare type FilteredStreamRuleResolvable = FilteredStreamRule | string;
//# sourceMappingURL=FilteredStreamRuleManager.d.ts.map