import { Collection } from '../util';
import { BaseManager, type BaseFetchOptions } from './BaseManager';
import { User, Tweet, SimplifiedUser, SimplifiedTweet } from '../structures';
import type { Client } from '../client';
import type { DELETEUsersSourceUserIdBlockingTargetUserIdResponse, DELETEUsersSourceUserIdFollowingTargetUserIdResponse, DELETEUsersSourceUserIdMutingTargetUserIdResponse, POSTUsersIdBlockingResponse, POSTUsersIdFollowingResponse, POSTUsersIdMutingResponse } from 'twitter-types';
/**
 * The manager class that holds API methods for {@link User} objects and stores their cache
 */
export declare class UserManager extends BaseManager<string, UserResolvable, User> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Resolves a user resolvable to its respective {@link User} object.
     * @param userResolvable An ID or instance that can be resolved to a user object
     * @returns The resolved user object
     */
    resolve(userResolvable: UserResolvable): User | null;
    /**
     * Resolves a user resolvable to its respective id.
     * @param userResolvable An ID or instance that can be resolved to a user object
     * @returns The id of the resolved user object
     */
    resolveId(userResolvable: UserResolvable): string | null;
    /**
     * Fetches one or more users.
     * @param userOrUsers The user or users to fetch
     * @param options An object containing optional parameters to apply
     * @returns A {@link User} or a {@link Collection} of them
     * @example
     * // Fetch a single user
     * const user = await client.users.fetch('1253316035878375424');
     *
     * // Fetch multiple users
     * const users = await client.users.fetch(['1253316035878375424', '6253282']);
     */
    fetch<U extends UserResolvable | Array<UserResolvable>>(userOrUsers: U, options?: FetchUserOrUsersOptions<U>): Promise<UserManagerFetchResult<U>>;
    /**
     * Fetches one or more users using their usernames.
     *
     * **âš  Usernames are subject to change, prefer using {@link UserManager.fetch}**
     * @param usernameOrUsernames The username(s) of user or users to fetch
     * @param options An object containing optional parameters to apply
     * @returns A {@link User} or a {@link Collection} of them
     * @example
     * // Fetch a single user
     * const user = await client.users.fetchByUsername('iShiibi');
     *
     * // Fetch multiple users
     * const users = await client.users.fetchByUsername(['iShiibi', 'TwitterAPI']);
     */
    fetchByUsername<U extends string | Array<string>>(usernameOrUsernames: U, options?: FetchUserOrUsersByUsernameOptions<U>): Promise<UserManagerFetchByUsernameResult<U>>;
    /**
     * Follows a user.
     * @param user The user to follow
     * @returns An object containing `following` and `pending_follow` fields
     * @see https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following
     * @example
     * const data = await client.users.follow('1253316035878375424');
     * console.log(data); // { following: true, pending_follow: false }
     */
    follow(user: UserResolvable): Promise<POSTUsersIdFollowingResponse['data']>;
    /**
     * Unfollows a user.
     * @param user The user to unfollow
     * @returns An object containing a `following` field
     * @see https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following
     * @example
     * const data = await client.users.unfollow('1253316035878375424');
     * console.log(data); // { following: false }
     */
    unfollow(user: UserResolvable): Promise<DELETEUsersSourceUserIdFollowingTargetUserIdResponse['data']>;
    /**
     * Blocks a user.
     * @param user The user to block
     * @returns An object containing a `blocking` field
     * @example
     * const data = await client.users.block('1253316035878375424');
     * console.log(data); // { blocking: true }
     */
    block(user: UserResolvable): Promise<POSTUsersIdBlockingResponse['data']>;
    /**
     * Unblocks a user.
     * @param user The user to unblock
     * @returns An object containing a `blocking` field
     * @example
     * const data = await client.users.unblock('1253316035878375424');
     * console.log(data); // { blocking: false }
     */
    unblock(user: UserResolvable): Promise<DELETEUsersSourceUserIdBlockingTargetUserIdResponse['data']>;
    /**
     * Mutes a user.
     * @param user The user to mute
     * @returns An object containing a `muting` field
     * @example
     * const data = await client.users.mute('1253316035878375424');
     * console.log(data); // { muting: true }
     */
    mute(user: UserResolvable): Promise<POSTUsersIdMutingResponse['data']>;
    /**
     * Unmutes a user.
     * @param user The user to unmute
     * @returns An object containing a `muting` field
     * @example
     * const data = await client.users.unmute('1253316035878375424');
     * console.log(data); // { muting: false }
     */
    unmute(user: UserResolvable): Promise<DELETEUsersSourceUserIdMutingTargetUserIdResponse['data']>;
}
/**
 * Options used to fetch a single user
 */
export declare type FetchUserOptions = BaseFetchOptions;
/**
 * Options used to fetch multiple users
 */
export declare type FetchUsersOptions = Omit<BaseFetchOptions, 'skipCacheCheck'>;
/**
 * Options used to fetch a single user by its username
 */
export declare type FetchUserByUsernameOptions = BaseFetchOptions;
/**
 * Options used to fetch multiple users by their usernames
 */
export declare type FetchUsersByUsernamesOptions = Omit<BaseFetchOptions, 'skipCacheCheck'>;
/**
 * Options used to fetch one or more users
 */
export declare type FetchUserOrUsersOptions<U extends UserResolvable | Array<UserResolvable>> = U extends UserResolvable ? FetchUserOptions : FetchUsersOptions;
export declare type UserManagerFetchResult<U extends UserResolvable | Array<UserResolvable>> = U extends UserResolvable ? User : Collection<string, User>;
/**
 * Options used to fetch one or more users by using their usernames
 */
export declare type FetchUserOrUsersByUsernameOptions<U extends string | Array<string>> = U extends string ? FetchUserByUsernameOptions : FetchUsersByUsernamesOptions;
export declare type UserManagerFetchByUsernameResult<U extends string | Array<string>> = U extends string ? User : Collection<string, User>;
export declare type UserResolvable = User | SimplifiedUser | Tweet | SimplifiedTweet | string;
//# sourceMappingURL=UserManager.d.ts.map