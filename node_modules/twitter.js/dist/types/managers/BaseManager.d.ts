import { Collection } from '../util';
import type { Client } from '../client';
/**
 * The base class for all managers
 */
export declare class BaseManager<K extends string, R, T extends {
    id: K;
}> {
    #private;
    /**
     * The instance of {@link Client} that was used to log in
     */
    client: Client;
    /**
     * The cache of the structures held by this manager
     */
    cache: Collection<K, T>;
    /**
     * @param client The logged in {@link Client} instance
     * @param structureType The kind of structures this manager stores
     */
    constructor(client: Client, structureType: StructureConstructable<T>);
    /**
     * Resolves a structure resolvable to its respective structure.
     * @param idOrInstance The ID or instance of the structure held by this manager
     */
    resolve(idOrInstance: K | R): T | null;
    /**
     * Resolves a structure resolvable to its id.
     * @param idOrInstance The ID or instance of the strucutre held by this manager
     */
    resolveId(idOrInstance: K | R): K | null;
}
/**
 * The common optional options to provide while fetching a content
 */
export interface BaseFetchOptions {
    /**
     * Whether to skip cache check for the requested content and fetch from the API directly
     */
    skipCacheCheck?: boolean;
    /**
     * Whether to store the fetched content in cache for later use
     */
    cacheAfterFetching?: boolean;
}
export interface StructureConstructable<T> {
    new (...args: any[]): T;
}
//# sourceMappingURL=BaseManager.d.ts.map