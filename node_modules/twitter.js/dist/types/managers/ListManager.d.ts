import { BaseManager, type BaseFetchOptions } from './BaseManager';
import { List, type SimplifiedList } from '../structures';
import type { Client } from '../client';
import type { DELETEListsIdMembersUserIdResponse, DELETEListsIdResponse, DELETEUsersIdFollowedListsListIdResponse, DELETEUsersIdPinnedListsListIdResponse, POSTListsIdMembersResponse, POSTListsResponse, POSTUsersIdFollowedListsResponse, POSTUsersIdPinnedListsResponse, PUTListsIdResponse } from 'twitter-types';
import type { UserResolvable } from './UserManager';
/**
 * The manager class that holds API methods for {@link List} objects and stores their cache
 */
export declare class ListManager extends BaseManager<string, ListResolvable, List> {
    #private;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    /**
     * Creates a new list.
     * @param options The options for creating the list
     * @returns An object containing `id` and `name` of the created list
     * @example
     * const data = await client.lists.create({ name: 'Twitter.js Community', description: 'A nice place' });
     * console.log(data); // { id: '1487049903255666689', name: 'Twitter.js Community' }
     */
    create(options: CreateListOptions): Promise<POSTListsResponse['data']>;
    /**
     * Fetches a list.
     * @param list The list to fetch
     * @param options An object containing optional parameters to apply
     * @returns A {@link List}
     * @example
     * const list = await client.lists.fetch('1487049903255666689');
     * console.log(`Fetched a list named: ${list.name}`); // Fetched a list named: Twitter.js Community
     */
    fetch(list: ListResolvable, options?: FetchListOptions): Promise<List>;
    /**
     * Deletes a list.
     * @param list The list to delete
     * @returns An object containing the `deleted` field
     * @example
     * const data = await client.lists.delete('1487090844578377729');
     * console.log(data); // { deleted: true }
     */
    delete(list: ListResolvable): Promise<DELETEListsIdResponse['data']>;
    /**
     * Updates a lists.
     * @param list The list to update
     * @param options The options for updating the list
     * @returns An object containing the `updated` field
     * @example
     * const data = await client.lists.update('1487049903255666689', { description: 'A nice place for everyone' });
     * console.log(data); // { updated: true }
     */
    update(list: ListResolvable, options: UpdateListOptions): Promise<PUTListsIdResponse['data']>;
    /**
     * Adds a member to a list.
     * @param list The list to add the member to
     * @param user The user to add as a member of the list
     * @returns An object containing the `is_member` field
     * @example
     * const user = await client.users.fetchByUsername('iShiibi');
     * const data = await client.lists.addMember('1487049903255666689', user);
     * console.log(data); // { is_member: true }
     */
    addMember(list: ListResolvable, user: UserResolvable): Promise<POSTListsIdMembersResponse['data']>;
    /**
     * Removes a member from a list.
     * @param list The list to remove the member from
     * @param member The member to remove from the list
     * @returns An object containing the `is_member` field
     * @example
     * const user = await client.users.fetchByUsername('iShiibi');
     * const data = await client.lists.removeMember('1487049903255666689', user);
     * console.log(data); // { is_member: false }
     */
    removeMember(list: ListResolvable, member: UserResolvable): Promise<DELETEListsIdMembersUserIdResponse['data']>;
    /**
     * Follows a list.
     * @param list The list to follow
     * @returns An object containing the `following` field
     * @example
     * const data = await client.lists.follow('1487049903255666689');
     * console.log(data); // { following: true }
     */
    follow(list: ListResolvable): Promise<POSTUsersIdFollowedListsResponse['data']>;
    /**
     * Unfollows a list.
     * @param list The list to unfollow
     * @returns An object containing the `following` field
     * @example
     * const data = await client.lists.unfollow('1487049903255666689');
     * console.log(data); // { following: false }
     */
    unfollow(list: ListResolvable): Promise<DELETEUsersIdFollowedListsListIdResponse['data']>;
    /**
     * Pins a list.
     * @param list The list to pin
     * @returns An object containing the `pinned` field
     * @example
     * const data = await client.lists.pin('1487049903255666689');
     * console.log(data); // { pinned: true }
     */
    pin(list: ListResolvable): Promise<POSTUsersIdPinnedListsResponse['data']>;
    /**
     * Unpins a list.
     * @param list The list to unpin
     * @returns An object containing the `pinned` field
     * @example
     * const data = await client.lists.unpin('1487049903255666689');
     * console.log(data); // { pinned: false }
     */
    unpin(list: ListResolvable): Promise<DELETEUsersIdPinnedListsListIdResponse['data']>;
}
/**
 * Options used to fetch a single list
 */
export declare type FetchListOptions = BaseFetchOptions;
/**
 * Options used for creating a new list
 */
export interface CreateListOptions {
    /**
     * The name of the list
     */
    name: string;
    /**
     * The description of the list
     */
    description?: string;
    /**
     * Whether the list should be private
     */
    private?: boolean;
}
/**
 * Options used to update a list
 */
export declare type UpdateListOptions = Partial<CreateListOptions>;
export declare type ListResolvable = List | SimplifiedList | string;
//# sourceMappingURL=ListManager.d.ts.map