import { BaseStructure } from './BaseStructure';
import type { Client } from '../client';
import type { APIList } from 'twitter-types';
import type { UpdateListOptions, UserResolvable } from '../managers';
export declare class SimplifiedList extends BaseStructure {
    /**
     * The name of the list
     */
    name: string;
    /**
     * The description of the list
     */
    description: string | null;
    /**
     * Whether the list is private
     */
    private: boolean | null;
    followerCount: number | null;
    memberCount: number | null;
    ownerId: string | null;
    createdAt: string | null;
    /**
     * @param client The logged in {@link Client} instance
     * @param data The raw data sent by the API for the list
     */
    constructor(client: Client, data: APIList);
    /**
     * Deletes this list.
     * @returns An object containing the `deleted` field
     */
    delete(): Promise<{
        deleted: boolean;
    }>;
    /**
     * Updates this list.
     * @param options The options for updating the list
     * @returns An object containing the `updated` field
     */
    update(options: UpdateListOptions): Promise<{
        updated: boolean;
    }>;
    /**
     * Adds a member to this list.
     * @param user The user to add as a member of the list
     * @returns An object containing the `is_member` field
     */
    addMember(user: UserResolvable): Promise<{
        is_member: boolean;
    }>;
    /**
     * Removes a member from this list.
     * @param user The member to remove from the list
     * @returns An object containing the `is_member` field
     */
    removeMember(user: UserResolvable): Promise<{
        is_member: boolean;
    }>;
    /**
     * Follows this list.
     * @returns An object containing the `following` field
     */
    follow(): Promise<{
        following: boolean;
    }>;
    /**
     * Unfollows this list.
     * @returns An object containing the `following` field
     */
    unfollow(): Promise<{
        following: boolean;
    }>;
    /**
     * Pins this list.
     * @returns An object containing the `pinned` field
     */
    pin(): Promise<{
        pinned: boolean;
    }>;
    /**
     * Unpins this list.
     * @returns An object containing the `pinned` field
     */
    unpin(): Promise<{
        pinned: false;
    }>;
    /**
     * Sets a new name for this list.
     * @param name The name to set
     * @returns An object containing the `updated` field
     */
    setName(name: string): Promise<{
        updated: boolean;
    }>;
    /**
     * Sets a new description for this list.
     * @param description The description to set
     * @returns An object containing the `updated` field
     */
    setDescription(description: string): Promise<{
        updated: boolean;
    }>;
    /**
     * Sets the privacy of this list.
     * @param isPrivate Whether the list should be private
     * @returns An object containing the `updated` field
     */
    setPrivate(isPrivate: boolean): Promise<{
        updated: boolean;
    }>;
}
//# sourceMappingURL=SimplifiedList.d.ts.map