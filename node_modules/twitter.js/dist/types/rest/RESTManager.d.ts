import { Collection } from '../util';
import { RequestHandler } from './RequestHandler';
import type { Client } from '../client';
import type { Response } from 'undici';
import type { RequestData } from '../structures';
/**
 * Manager class for the rest API
 */
export declare class RESTManager {
    /**
     * The instance of {@link Client} that was used to log in
     */
    client: Client;
    /**
     * The collection of request handlers
     */
    requestHandlers: Collection<string, RequestHandler>;
    /**
     * @param client The logged in {@link Client} instance
     */
    constructor(client: Client);
    get routeBuilder(): any;
    get baseURL(): string;
    getBearerAuth(): string;
    getUserContextAuth(method: string, url: string): string;
    request(method: string, path: string, options: ExtendedRequestData<unknown, unknown>): Promise<Record<string, unknown> | ArrayBuffer | Response>;
}
export interface ExtendedRequestData<Q, B> extends RequestData<Q, B> {
    route: string;
}
//# sourceMappingURL=RESTManager.d.ts.map