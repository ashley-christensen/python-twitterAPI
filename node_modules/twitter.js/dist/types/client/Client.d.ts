import { BaseClient, type ClientOptions } from './BaseClient';
import { UserManager, TweetManager, SpaceManager, ListManager, FilteredStreamRuleManager } from '../managers';
import { ClientCredentials, ClientUser, type ClientCredentialsInterface } from '../structures';
import { BlockedUsersBook, type BlockedUsersBookOptions, ComposedTweetsBook, type ComposedTweetsBookOptions, FollowedListsBook, type FollowedListsBookOptions, LikedByUsersBook, type LikedByUsersBookOptions, UserMentioningTweetsBook, type UserMentioningTweetsBookOptions, LikedTweetsBook, type LikedTweetsBookOptions, ListFollowersBook, type ListFollowersBookOptions, ListMembersBook, type ListMembersBookOptions, ListTweetsBook, type ListTweetsBookOptions, MemberOfListsBook, type MemberOfListsBookOptions, MutedUsersBook, type MutedUsersBookOptions, OwnedListsBook, type OwnedListsBookOptions, PinnedListsBook, type PinnedListsBookOptions, RetweetedByUsersBook, type RetweetedByUsersBookOptions, TweetsCountBook, type TweetsCountBookOptions, UserFollowersBook, type UserFollowersBookOptions, UserFollowingsBook, type UserFollowingsBookOptions, SearchTweetsBook, type SearchTweetsBookOptions, SpaceTicketBuyersBook, type SpaceTicketBuyersBookOptions, QuoteTweetsBook, type QuoteTweetsBookOptions } from '../books';
/**
 * The core class that exposes all the functionalities available in twitter.js
 */
export declare class Client extends BaseClient {
    #private;
    /**
     * The time at which the client became `ready`
     */
    readyAt: Date | null;
    /**
     * The bearer token that was provided to the client during login
     */
    token: string | null;
    /**
     * The credentials that were provided to the client during login
     *
     * **Note**: This will be available only if the client was logged in using {@link Client.login}
     */
    credentials: ClientCredentials | null;
    /**
     * The twitter user this client represents
     *
     * **Note**: This will be available only if the client was logged in using {@link Client.login}
     */
    me: ClientUser | null;
    /**
     * The manager for {@link Tweet} objects
     */
    tweets: TweetManager;
    /**
     * The manager for {@link User} objects
     */
    users: UserManager;
    /**
     * The manager for {@link Space} objects
     */
    spaces: SpaceManager;
    /**
     * The manager for {@link List} objects
     */
    lists: ListManager;
    /**
     * The manager for {@link FilteredStreamRule} objects
     */
    filteredStreamRules: FilteredStreamRuleManager;
    /**
     * @param options The options to initialize the client with
     */
    constructor(options?: ClientOptions);
    /**
     * Sets the client ready to make bearer token authorized API requests.
     * Emits a `ready` event on success.
     * @param token The bearer token for the client
     * @returns The provided bearer token
     */
    loginWithBearerToken(token: string): Promise<string>;
    /**
     * Sets the client ready to make both bearer token and user context authorized API requests.
     * Emits a `ready` event on success.
     * @param credentials The credentials for the client
     * @returns The provided credentials
     */
    login(credentials: ClientCredentialsInterface): Promise<ClientCredentials>;
    /**
     * Creates book for making paginated requests.
     * @param bookName The name of the book to create
     * @param options An object containing parameters to initialize the book with
     * @returns An instance of the requested book class
     * @example
     * const user = await client.users.fetchByUsername('iShiibi');
     * const composedTweetsBook = client.createBook('ComposedTweetsBook', { user, maxResultsPerPage: 5 });
     * const userTweets = await composedTweetsBook.fetchNextPage();
     */
    createBook<K extends CreateBookNameType>(bookName: K, options: CreateBookOptionType<K>): CreateBookReturnType<K>;
}
export interface CreateBookMapping {
    BlockedUsersBook: [book: BlockedUsersBook, options: BlockedUsersBookOptions];
    ComposedTweetsBook: [book: ComposedTweetsBook, options: ComposedTweetsBookOptions];
    FollowedListsBook: [book: FollowedListsBook, options: FollowedListsBookOptions];
    LikedByUsersBook: [book: LikedByUsersBook, options: LikedByUsersBookOptions];
    LikedTweetsBook: [book: LikedTweetsBook, options: LikedTweetsBookOptions];
    ListFollowersBook: [book: ListFollowersBook, options: ListFollowersBookOptions];
    ListMembersBook: [book: ListMembersBook, options: ListMembersBookOptions];
    ListTweetsBook: [book: ListTweetsBook, options: ListTweetsBookOptions];
    MemberOfListsBook: [book: MemberOfListsBook, options: MemberOfListsBookOptions];
    MutedUsersBook: [book: MutedUsersBook, options: MutedUsersBookOptions];
    OwnedListsBook: [book: OwnedListsBook, options: OwnedListsBookOptions];
    PinnedListsBook: [book: PinnedListsBook, options: PinnedListsBookOptions];
    QuoteTweetsBook: [book: QuoteTweetsBook, options: QuoteTweetsBookOptions];
    RetweetedByUsersBook: [book: RetweetedByUsersBook, options: RetweetedByUsersBookOptions];
    SearchTweetsBook: [book: SearchTweetsBook, options: SearchTweetsBookOptions];
    SpaceTicketBuyersBook: [book: SpaceTicketBuyersBook, options: SpaceTicketBuyersBookOptions];
    TweetsCountBook: [book: TweetsCountBook, options: TweetsCountBookOptions];
    UserFollowersBook: [book: UserFollowersBook, options: UserFollowersBookOptions];
    UserFollowingsBook: [book: UserFollowingsBook, options: UserFollowingsBookOptions];
    UserMentioningTweetsBook: [book: UserMentioningTweetsBook, options: UserMentioningTweetsBookOptions];
}
export declare type CreateBookOptionType<K> = K extends keyof CreateBookMapping ? CreateBookMapping[K][1] : unknown[];
export declare type CreateBookReturnType<K> = K extends keyof CreateBookMapping ? CreateBookMapping[K][0] : unknown[];
declare const Books: {
    BlockedUsersBook: typeof BlockedUsersBook;
    ComposedTweetsBook: typeof ComposedTweetsBook;
    FollowedListsBook: typeof FollowedListsBook;
    LikedByUsersBook: typeof LikedByUsersBook;
    LikedTweetsBook: typeof LikedTweetsBook;
    ListFollowersBook: typeof ListFollowersBook;
    ListMembersBook: typeof ListMembersBook;
    ListTweetsBook: typeof ListTweetsBook;
    MemberOfListsBook: typeof MemberOfListsBook;
    MutedUsersBook: typeof MutedUsersBook;
    OwnedListsBook: typeof OwnedListsBook;
    PinnedListsBook: typeof PinnedListsBook;
    QuoteTweetsBook: typeof QuoteTweetsBook;
    RetweetedByUsersBook: typeof RetweetedByUsersBook;
    SearchTweetsBook: typeof SearchTweetsBook;
    SpaceTicketBuyersBook: typeof SpaceTicketBuyersBook;
    TweetsCountBook: typeof TweetsCountBook;
    UserFollowersBook: typeof UserFollowersBook;
    UserFollowingsBook: typeof UserFollowingsBook;
    UserMentioningTweetsBook: typeof UserMentioningTweetsBook;
};
export declare type CreateBookNameType = keyof typeof Books;
export {};
//# sourceMappingURL=Client.d.ts.map