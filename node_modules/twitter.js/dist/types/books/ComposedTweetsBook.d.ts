import { Collection } from '../util';
import { type Tweet } from '../structures';
import { BaseRangeBook, type BaseRangeBookOptions } from './BaseRangeBook';
import type { Client } from '../client';
import type { GETUsersIdTweetsQuery } from 'twitter-types';
import type { UserResolvable } from '../managers';
/**
 * A class for fetching tweets composed by a twitter user
 */
export declare class ComposedTweetsBook extends BaseRangeBook {
    #private;
    /**
     * The Id of the user this book belongs to
     */
    userId: string;
    /**
     * The types of tweets that the book should **not** fetch
     */
    exclude: GETUsersIdTweetsQuery['exclude'] | null;
    /**
     * @param client The logged in {@link Client} instance
     * @param options The options to initialize the book with
     */
    constructor(client: Client, options: ComposedTweetsBookOptions);
    /**
     * Fetches the next page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} composed by the user
     */
    fetchNextPage(): Promise<Collection<string, Tweet>>;
    /**
     * Fetches the previous page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} composed by the user
     */
    fetchPreviousPage(): Promise<Collection<string, Tweet>>;
}
export interface ComposedTweetsBookOptions extends BaseRangeBookOptions {
    user: UserResolvable;
    /**
     * The types of tweets to exclude
     */
    exclude?: GETUsersIdTweetsQuery['exclude'];
}
//# sourceMappingURL=ComposedTweetsBook.d.ts.map