import { Collection } from '../util';
import { BaseBook, type BaseBookOptions } from './BaseBook';
import { type Tweet } from '../structures';
import type { Client } from '../client';
import type { UserResolvable } from '../managers';
/**
 * A class for fetching tweets liked by a twitter user
 */
export declare class LikedTweetsBook extends BaseBook {
    #private;
    /**
     * The Id of the user this book belongs to
     */
    userId: string;
    /**
     * @param client The logged in {@link Client} instance
     * @param options The options to initialize the book with
     */
    constructor(client: Client, options: LikedTweetsBookOptions);
    /**
     * Fetches the next page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} liked by the given user
     */
    fetchNextPage(): Promise<Collection<string, Tweet>>;
    /**
     * Fetches the previous page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} liked by the given user
     */
    fetchPreviousPage(): Promise<Collection<string, Tweet>>;
}
export interface LikedTweetsBookOptions extends BaseBookOptions {
    user: UserResolvable;
}
//# sourceMappingURL=LikedTweetsBook.d.ts.map