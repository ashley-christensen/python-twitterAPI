import { Collection } from '../util';
import { BaseBook, type BaseBookOptions } from './BaseBook';
import { type Tweet } from '../structures';
import type { Client } from '../client';
import type { ListResolvable } from '../managers';
/**
 * A class for fetching tweets from a list
 */
export declare class ListTweetsBook extends BaseBook {
    #private;
    /**
     * The Id of the list this book belongs to
     */
    listId: string;
    /**
     * @param client The logged in {@link Client} instance
     * @param options The options to initialize the book with
     */
    constructor(client: Client, options: ListTweetsBookOptions);
    /**
     * Fetches the next page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} belonging to the given list
     */
    fetchNextPage(): Promise<Collection<string, Tweet>>;
    /**
     * Fetches the previous page of the book if there is one.
     * @returns A {@link Collection} of {@link Tweet} belonging to the given list
     */
    fetchPreviousPage(): Promise<Collection<string, Tweet>>;
}
export interface ListTweetsBookOptions extends BaseBookOptions {
    list: ListResolvable;
}
//# sourceMappingURL=ListTweetsBook.d.ts.map